{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/weather.service\";\nimport * as i2 from \"@angular/common\";\nfunction WeatherComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"strong\");\n    i0.ɵɵtext(3, \"City:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Temperature:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.city, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.temp, \" \\u00B0C\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.description, \"\");\n  }\n}\nexport class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.city = 'Porto Alegre'; // Exemplo de cidade\n    this.weatherIcon = ''; // Nome do ícone a ser exibido\n  }\n\n  ngOnInit() {\n    this.getWeather();\n  }\n  getWeather() {\n    this.weatherService.getWeather(this.city).subscribe(data => {\n      this.weatherData = data;\n      this.getWeatherIconUrl();\n    });\n  }\n  getWeatherIconUrl(conditionSlug) {\n    switch (conditionSlug) {\n      case 'clear_day':\n        this.weatherIcon = 'assets/icons/clear_day.svg';\n        break;\n      case 'rain':\n        this.weatherIcon = 'assets/icons/rain.svg';\n        break;\n      case 'cloud':\n        this.weatherIcon = 'assets/icons/cloud.svg';\n        break;\n      case 'clear_night':\n        this.weatherIcon = 'assets/icons/clear_night.svg';\n        break;\n      default:\n      case 'cloudly_day':\n        this.weatherIcon = 'assets/icons/cloudly_day.svg';\n        break;\n      case 'cloudly_night':\n        this.weatherIcon = 'assets/icons/cloudly_night.svg';\n        break;\n      case 'fog':\n        this.weatherIcon = 'assets/icons/fog.svg';\n        break;\n      case 'hail':\n        this.weatherIcon = 'assets/icons/hail.svg';\n        break;\n      case 'none_day':\n        this.weatherIcon = 'assets/icons/none_day.svg';\n        break;\n      case 'none_night':\n        this.weatherIcon = 'assets/icons/none_night.svg';\n        break;\n      case 'snow':\n        this.weatherIcon = 'assets/icons/snow.svg';\n        break;\n      case 'storm':\n        this.weatherIcon = 'assets/icons/storm.svg';\n        break;\n    }\n  }\n}\nWeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\nWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WeatherComponent,\n  selectors: [[\"app-weather\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[4, \"ngIf\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Weather Details\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, WeatherComponent_div_2_Template, 13, 3, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.weatherData);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"\\n\\ndiv[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    height: 100vh;\\n    text-align: center;\\n  }\\n  \\n  h2[_ngcontent-%COMP%] {\\n    margin-bottom: 20px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvd2VhdGhlci93ZWF0aGVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBQ3hDO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxtQkFBbUI7RUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBFc3RpbG9zIHBhcmEgY2VudHJhbGl6YXIgbyBjb250ZcODwrpkbyAqL1xyXG5kaXYge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICBoMiB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","weatherData","city","temp","description","WeatherComponent","constructor","weatherService","weatherIcon","ngOnInit","getWeather","subscribe","data","getWeatherIconUrl","conditionSlug","ɵɵdirectiveInject","i1","WeatherService","selectors","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","ɵɵtemplate","WeatherComponent_div_2_Template","ɵɵproperty"],"sources":["C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\weather\\weather.component.ts","C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\weather\\weather.component.html"],"sourcesContent":["// weather.component.ts\n\nimport { Component, OnInit, Input } from '@angular/core';\nimport { WeatherService } from '../services/weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n  weatherData: any;\n  city: string = 'Porto Alegre'; // Exemplo de cidade\n  weatherIcon: string = ''; // Nome do ícone a ser exibido\n\n  constructor(private weatherService: WeatherService) {}\n\n  ngOnInit() {\n    this.getWeather();\n  }\n\n  getWeather() {\n    this.weatherService.getWeather(this.city)\n      .subscribe(data => {\n        this.weatherData = data;\n        this.getWeatherIconUrl();\n      });\n  }\n\n  getWeatherIconUrl(conditionSlug: string): string {\n    switch (conditionSlug) {\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      case 'clear_day':\n        this.weatherIcon = 'assets/icons/clear_day.svg';\n        break;\n      case 'rain':\n        this.weatherIcon = 'assets/icons/rain.svg';\n        break;\n      case 'cloud':\n        this.weatherIcon = 'assets/icons/cloud.svg';\n        break;\n      case 'clear_night':\n          this.weatherIcon = 'assets/icons/clear_night.svg';\n          break;\n      default:\n      case 'cloudly_day':\n        this.weatherIcon = 'assets/icons/cloudly_day.svg';\n        break;\n      case 'cloudly_night':\n        this.weatherIcon = 'assets/icons/cloudly_night.svg';\n        break;\n      case 'fog':\n        this.weatherIcon = 'assets/icons/fog.svg';\n        break;\n      case 'hail':\n        this.weatherIcon = 'assets/icons/hail.svg';\n        break;\n      case 'none_day':\n        this.weatherIcon = 'assets/icons/none_day.svg';\n        break;\n      case 'none_night':\n        this.weatherIcon = 'assets/icons/none_night.svg';\n        break;\n      case 'snow':\n        this.weatherIcon = 'assets/icons/snow.svg';\n        break;\n      case 'storm':\n        this.weatherIcon = 'assets/icons/storm.svg';\n        break;\n      }\n  }\n\n}\n","<!-- weather.component.html -->\n\n<h2>Weather Details</h2>\n\n<div *ngIf=\"weatherData\">\n  <div><strong>City:</strong> {{ weatherData.city }}</div>\n  <div><strong>Temperature:</strong> {{ weatherData.temp }} °C</div>\n  <div><strong>Description:</strong> {{ weatherData.description }}</div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}