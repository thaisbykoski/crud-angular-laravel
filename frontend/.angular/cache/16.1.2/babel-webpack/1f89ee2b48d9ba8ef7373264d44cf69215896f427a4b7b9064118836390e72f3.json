{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/weather.service\";\nimport * as i2 from \"@angular/common\";\nfunction WeatherComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"strong\");\n    i0.ɵɵtext(3, \"City:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Temperature:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\");\n    i0.ɵɵelement(14, \"img\", 2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.city, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.temp, \" \\u00B0C\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.description, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r0.getWeatherIconUrl(ctx_r0.weatherData.condition_slug), i0.ɵɵsanitizeUrl);\n  }\n}\nexport class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.city = '';\n    this.weatherIcon = ''; // Nome do ícone a ser exibido\n  }\n\n  ngOnInit() {\n    this.getWeather();\n  }\n  getWeather() {\n    this.weatherService.getWeather(this.city).subscribe(data => {\n      this.weatherData = data;\n      this.weatherIcon = this.getWeatherIconUrl(data.results.condition_slug);\n    });\n  }\n  getWeatherIconUrl(conditionSlug) {\n    // Lógica para mapear condition_slug para o nome do ícone e retornar a URL adequada\n    switch (conditionSlug) {\n      case 'rain':\n        return 'assets/icons/rain.svg';\n      case 'clear_day':\n        return 'assets/icons/clear_day.svg';\n      case 'clear_night':\n        return 'assets/icons/clear_night.svg';\n      case 'cloud':\n        return 'assets/icons/cloud.svg';\n      case 'cloudly_day':\n        return 'assets/icons/cloudly_day.svg';\n      case 'cloudly_night':\n        return 'assets/icons/cloudly_night.svg';\n      case 'fog':\n        return 'assets/icons/fog.svg';\n      case 'hail':\n        return 'assets/icons/hail.svg';\n      case 'none_day':\n        return 'assets/icons/none_day.svg';\n      case 'none_night':\n        return 'assets/icons/none_night.svg';\n      case 'snow':\n        return 'assets/icons/snow.svg';\n      case 'storm':\n        return 'assets/icons/storm.svg';\n      default:\n        return 'assets/icons/default.svg';\n    }\n  }\n}\nWeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\nWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WeatherComponent,\n  selectors: [[\"app-weather\"]],\n  inputs: {\n    weatherData: \"weatherData\"\n  },\n  decls: 4,\n  vars: 1,\n  consts: [[1, \"weather\"], [4, \"ngIf\"], [\"alt\", \"Weather Icon\", 3, \"src\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Weather Details\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, WeatherComponent_div_3_Template, 15, 4, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.weatherData);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\".weather[_ngcontent-%COMP%] {\\n    margin-top: 25px;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    height: 100vh;\\n    text-align: center;\\n\\n}  \\n  h2[_ngcontent-%COMP%] {\\n    margin-bottom: 20px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvd2VhdGhlci93ZWF0aGVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYixrQkFBa0I7O0FBRXRCO0VBQ0U7SUFDRSxtQkFBbUI7RUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyIud2VhdGhlciB7XHJcbiAgICBtYXJnaW4tdG9wOiAyNXB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxufSAgXHJcbiAgaDIge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","weatherData","city","temp","description","ɵɵproperty","getWeatherIconUrl","condition_slug","ɵɵsanitizeUrl","WeatherComponent","constructor","weatherService","weatherIcon","ngOnInit","getWeather","subscribe","data","results","conditionSlug","ɵɵdirectiveInject","i1","WeatherService","selectors","inputs","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","ɵɵtemplate","WeatherComponent_div_3_Template"],"sources":["C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\weather\\weather.component.ts","C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\weather\\weather.component.html"],"sourcesContent":["// weather.component.ts\n\nimport { Component, OnInit, Input } from '@angular/core';\nimport { WeatherService } from '../services/weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n  @Input() weatherData: any;\n  city: string = ''; \n  weatherIcon: string = ''; // Nome do ícone a ser exibido\n\n  constructor(private weatherService: WeatherService) {}\n\n  ngOnInit(): void {\n    this.getWeather();\n  }\n\n  getWeather() {\n    this.weatherService.getWeather(this.city)\n      .subscribe(data => {\n        this.weatherData = data;\n        this.weatherIcon = this.getWeatherIconUrl(data.results.condition_slug);\n      });\n  }\n\n  getWeatherIconUrl(conditionSlug: string): string {\n    // Lógica para mapear condition_slug para o nome do ícone e retornar a URL adequada\n    switch (conditionSlug) {\n      case 'rain':\n        return 'assets/icons/rain.svg';\n      case 'clear_day':\n        return 'assets/icons/clear_day.svg';\n      case 'clear_night':\n        return 'assets/icons/clear_night.svg';\n      case 'cloud':\n        return 'assets/icons/cloud.svg';\n      case 'cloudly_day':\n        return 'assets/icons/cloudly_day.svg';\n      case 'cloudly_night':\n        return 'assets/icons/cloudly_night.svg';\n      case 'fog':\n        return 'assets/icons/fog.svg';\n      case 'hail':\n        return 'assets/icons/hail.svg';\n      case 'none_day':\n        return 'assets/icons/none_day.svg';\n      case 'none_night':\n        return 'assets/icons/none_night.svg';\n      case 'snow':\n        return 'assets/icons/snow.svg';\n      case 'storm':\n        return 'assets/icons/storm.svg';\n      default:\n        return 'assets/icons/default.svg'; \n    }\n  }\n}\n","<div class=\"weather\">\n    <h2>Weather Details</h2>\n        \n    <div *ngIf=\"weatherData\">\n    <div><strong>City:</strong> {{ weatherData.city }}</div>\n    <div><strong>Temperature:</strong> {{ weatherData.temp }} °C</div>\n    <div><strong>Description:</strong> {{ weatherData.description }}</div>\n    <div><img [src]=\"getWeatherIconUrl(weatherData.condition_slug)\" alt=\"Weather Icon\"></div>\n    </div>    \n</div>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}