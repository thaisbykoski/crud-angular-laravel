{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.hgbrasil.com/weather';\n  }\n  getWeather(city) {\n    const apiKey = 'e5dfe087'; // Substitua pela sua chave de API do HG Brasil\n    return this.http.get(`http://localhost:4200/weather?key=e5dfe087&city_name=${city}`);\n    pipe(map(response => {\n      return {\n        city: response.results.city_name,\n        temp: response.results.temp,\n        description: response.results.description\n        // Mapeie outras propriedades conforme necessário\n      };\n    }));\n  }\n}\n\nWeatherService.ɵfac = function WeatherService_Factory(t) {\n  return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherService,\n  factory: WeatherService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","WeatherService","constructor","http","apiUrl","getWeather","city","apiKey","get","pipe","response","results","city_name","temp","description","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\services\\weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface WeatherData {\n  city: string;\n  temp: number;\n  description: string;\n  // Adicione outras propriedades conforme necessário\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n  private apiUrl = 'https://api.hgbrasil.com/weather';\n\n  constructor(private http: HttpClient) {}\n\n  getWeather(city: string): Observable<WeatherData> {\n    const apiKey = 'e5dfe087'; // Substitua pela sua chave de API do HG Brasil\n    return this.http.get(`http://localhost:4200/weather?key=e5dfe087&city_name=${city}`);\n      .pipe(\n        map((response: any) => {\n          return {\n            city: response.results.city_name,\n            temp: response.results.temp,\n            description: response.results.description\n            // Mapeie outras propriedades conforme necessário\n          };\n        })\n      );\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAYpC,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,kCAAkC;EAEZ;EAEvCC,UAAUA,CAACC,IAAY;IACrB,MAAMC,MAAM,GAAG,UAAU,CAAC,CAAC;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,wDAAwDF,IAAI,EAAE,CAAC;IACjFG,IAAI,CACHT,GAAG,CAAEU,QAAa,IAAI;MACpB,OAAO;QACLJ,IAAI,EAAEI,QAAQ,CAACC,OAAO,CAACC,SAAS;QAChCC,IAAI,EAAEH,QAAQ,CAACC,OAAO,CAACE,IAAI;QAC3BC,WAAW,EAAEJ,QAAQ,CAACC,OAAO,CAACG;QAC9B;OACD;IACH,CAAC,CAAC,CACH;EACL;;;AAlBWb,cAAc,C;mBAAdA,cAAc,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdjB,cAAc,C;SAAdA,cAAc;EAAAkB,OAAA,EAAdlB,cAAc,CAAAmB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}