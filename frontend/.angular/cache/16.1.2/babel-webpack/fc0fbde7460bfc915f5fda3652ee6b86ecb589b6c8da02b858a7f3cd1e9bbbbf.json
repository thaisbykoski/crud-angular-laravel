{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000/api/books';\n  }\n  getBooks() {\n    return this.http.get(this.baseUrl);\n  }\n  getBook(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url);\n  }\n  createBook(bookData) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(this.baseUrl, bookData, {\n      headers\n    });\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","BookService","constructor","http","baseUrl","getBooks","get","getBook","id","url","createBook","bookData","token","localStorage","getItem","headers","set","post","updateBook","book","put","deleteBook","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Thais Bykoski\\Documents\\Projetos\\teste-thais-bykoski\\frontend\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient , HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Book } from '../models/book.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookService {\r\n  private baseUrl = 'http://localhost:8000/api/books';\r\n \r\n  constructor(private http: HttpClient) {}\r\n\r\n  getBooks(): Observable<Book[]> {\r\n    return this.http.get<Book[]>(this.baseUrl);\r\n  }\r\n\r\n  getBook(id: number): Observable<Book> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.http.get<Book>(url);\r\n  }\r\n\r\n  createBook(bookData: any): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.post(this.baseUrl, bookData, { headers });\r\n  }\r\n  updateBook(id: number, book: Book): Observable<Book> {\r\n    return this.http.put<Book>(`${this.baseUrl}/${id}`, book);\r\n  }\r\n\r\n  deleteBook(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}"],"mappings":"AACA,SAAsBA,WAAW,QAAQ,sBAAsB;;;AAO/D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,iCAAiC;EAEZ;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,OAAO,CAAC;EAC5C;EAEAG,OAAOA,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,IAAII,EAAE,EAAE;IACnC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAOG,GAAG,CAAC;EACjC;EAEAC,UAAUA,CAACC,QAAa;IACtB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACT,IAAI,CAACc,IAAI,CAAC,IAAI,CAACb,OAAO,EAAEO,QAAQ,EAAE;MAAEI;IAAO,CAAE,CAAC;EAC5D;EACAG,UAAUA,CAACV,EAAU,EAAEW,IAAU;IAC/B,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,OAAO,IAAII,EAAE,EAAE,EAAEW,IAAI,CAAC;EAC3D;EAEAE,UAAUA,CAACb,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACmB,MAAM,CAAO,GAAG,IAAI,CAAClB,OAAO,IAAII,EAAE,EAAE,CAAC;EACxD;;AAzBWP,WAAW,C;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXzB,WAAW,C;SAAXA,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}